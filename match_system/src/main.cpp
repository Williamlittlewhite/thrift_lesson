// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>
#include <iostream>
#include <thread>
#include <condition_variable>
#include <queue>
#include <mutex>
#include <vector>
#include <string>
#include <algorithm>
#include <unistd.h>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace apache::thrift::concurrency;

using namespace  ::match_service;
using namespace  ::save_service;
struct Task{
    User user;
    std::string type;
};

class Message_queue{
    public:
        std::queue<Task> q;
        std::mutex m;
        std::condition_variable cv;
}message_queue;

class Pool{
    private:
        std::vector<User> users;
        std::vector<int>   wt;
    public:
        void add(User& user)
        {
            users.push_back(user);
            wt.push_back(0);
        }
        void remove(User& user)
        {
            for(uint32_t i=0;i<users.size();i++)
            {
                if(users[i].id == user.id)
                {
                    users.erase(users.begin()+i);
                    wt.erase(wt.begin()+i);
                    break;
                }
            }
        }
        void save_result(User& a,User& b)
        {
            printf("Match Result: %d %d\n ",a.id,b.id);
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();
                client.save_data("acs_6502","4d487d0d",a.id,b.id);

                transport->close();
            } catch (TException& tx) {
                std::cout << "ERROR: " << tx.what() << std::endl;
            }
        }

        /*void match()
          {
          while(users.size()>1)
          {
          auto a = users[0], b = users[1];
          save_result(a,b);
          users.erase(users.begin());
          users.erase(users.begin());
          }

          }*/
        /*void match()
        {
            while(users.size()> 1)
            {
                bool flag = true;
                sort(users.begin(),users.end(),[&](User& a,User& b){return a.score < b.score;});
                for(uint32_t i=1; i < users.size();i++)
                {
                    int dx = users[i].score - users[i-1].score;
                    if(dx <= 50)
                    {
                        save_result(users[i-1],users[i]);
                        users.erase(users.begin()+i-1,users.begin()+i+1);
                        flag = false;
                        break;
                    }
                }
                if(flag) break;
            }
        }*/

        bool check_match(uint32_t i,uint32_t j)
        {
            int a = users[i].score, b = users[j].score;
            int a_max_dif = wt[i]*50, b_max_dif = wt[j]*50;
            int dx = abs(a-b);
            if (dx<=a_max_dif && dx<=b_max_dif)
                return true;
            return false;
        }

        void match()
        {
            for(uint32_t i=0;i<users.size();i++)
                wt[i]+=1;
            while(users.size()>1)
            {
                bool flag = true;
                for(uint32_t i=0;i<users.size();i++)
                {
                    for(uint32_t j=i+1;j<users.size();j++)
                    {
                        if(check_match(i,j))
                        {
                            save_result(users[i],users[j]);
                            users.erase(users.begin()+j);
                            users.erase(users.begin()+i);
                            wt.erase(wt.begin()+j);
                            wt.erase(wt.begin()+i);
                            flag = false;
                            break;
                        }
                    }
                    if(!flag) break;
                }
                if(flag) break;
            }
        }

}pool;

class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        /**
         * user: 添加的用户信息
         * info: 附加信息
         * 在匹配池中添加一个名用户
         * 
         * @param user
         * @param info
         */
        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user,"add"});
            message_queue.cv.notify_all();
            return 0;
        }

        /**
         * user: 删除的用户信息
         * info: 附加信息
         * 从匹配池中删除一名用户
         * 
         * @param user
         * @param info
         */
        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");
            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user,"remove"});
            message_queue.cv.notify_all();
            return 1;
        }

};

class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*std::cout << "Incoming connection\n";
            std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
            */

            return new MatchHandler;
        }
        void releaseHandler( MatchIf* handler ) override         {
            delete handler;  //记得要修改这里的参数
        }
};

void consume_task(){
    while(true)
    {
        std::unique_lock<std::mutex> lck(message_queue.m);
        if(message_queue.q.empty())
        {
            //message_queue.cv.wait(lck);
            lck.unlock();
            pool.match();
            sleep(1);
        }
        else
        {
            auto t  = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();
            //do task
            if(t.type == "add")
                pool.add(t.user);
            else if(t.type == "remove")
                pool.remove(t.user);

           // pool.match();
        }
    }


}



int main(int argc, char **argv) {
    /*int port = 9090;
      ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
      ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
      ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
      ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
      ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

      TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
      */
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());
    std::cout << "Start Match Sever" << std::endl;

    std::thread matching_thread(consume_task);
    server.serve();

    return 0;
}

